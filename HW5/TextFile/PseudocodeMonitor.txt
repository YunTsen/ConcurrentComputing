public:
void queue(Cannbal *c){
    MonitorBegin();    
    queuingCannbals.push_back(c);
    cannbals++;//多了一隻食人怪在排隊
    total++;
    if(total>=3&&missionaries!=1){//有三個以上乘客在等，且傳道士>1
        canPick.signal();
    }
    MonitorEnd();
    return;
}
void queue(Missionary *m){
    MonitorBegin();    
    queuingMissionaries.push_back(m);
    missionaries++;//多了一個傳道士在排隊
    total++;
    if(total>=3&&missionaries!=1){//有三個以上乘客在等，且傳道士>1
        canPick.signal();
    }
    MonitorEnd();
    return;
}

void onBoard(Cannbal *c){
    MonitorBegin();
    cannbalsWait[c->getIndex()].wait();   
    
    MonitorEnd();
    return;
}

void onBoard(Missionary *m){
    MonitorBegin();
    MissionarWait[c->getIndex()].wait();   
    
    MonitorEnd();
    return;
}

void offBoard(Cannbal *c){
    MonitorBegin();    
    
    MonitorEnd();
    return;
}

void BoatReady(){
    MonitorBegin();    
    canPick.wait();
    MonitorEnd();
    return;
}

bool BoatPick(){
    MonitorBegin();    
    int min = 1;
    int max = total;
    int x = rand() % (max - min + 1) + min;

    if(x>missionaries){//挑到食人族
        x = rand() % (max - missionaries + 1) + min;
        Pick(cannbalsQueue[x]);
    }
    MonitorEnd();

    return;
}

Pick(x);


private:
Condition canPick;
vector<Condition> missionarisWait[m];
vector<Condition> cannbalsWait[c];
vector<Missionary*> missionariesQueue;
vector<Cannbal*> cannbalsQueue;
unsigned int cannbals;
unsigned int missionaries;
unsigned int total;